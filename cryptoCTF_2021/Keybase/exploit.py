from Crypto.Util import number
from Crypto.Cipher import AES
import os, sys, random
import binascii
from pwn import *

conn = remote("01.cr.yp.toc.tf", 17010)
conn.sendline(b"G")
conn.recvuntil(b"= ")
enc_flag = binascii.unhexlify(conn.recvline(False))

while True:
    conn.sendline(b"T")
    conn.sendline(b"CCTF{xxxxxxxxxxxxxxxxxxxxxxxxxx}")

    conn.recvuntil(b"enc = ")
    enc = conn.recvline(False)

    conn.recvuntil(b"key = ")
    key = conn.recvline(False)

    if b"*" not in enc[:4]:
        break

key = key[:-4].decode()
enc = enc.replace(b"*", b"0")
plaintext = b"CCTF{xxxxxxxxxxxxxxxxxxxxxxxxxx}"

plain_block2 = plaintext[16:]
plain_block1 = plaintext[:16]

cipher_block2 = binascii.unhexlify(enc[32:])
cipher_block1 = binascii.unhexlify(enc[:32])


def bruteforce_key():
    keys = []
    for i in range(0,256):
        for j in range(0,256):
            b1 = hex(i)[2:].rjust(2, "0")
            b2 = hex(j)[2:].rjust(2, "0")
            k = key+b1+b2
            aes = AES.new(binascii.unhexlify(k), AES.MODE_CBC, cipher_block1)
            p = str(aes.decrypt(cipher_block2))[2:-1]
            if str(p).startswith("xx"):
                keys.append(binascii.unhexlify(k))
    return keys

def findCipher1(key):
    aes = AES.new(key, AES.MODE_CBC, plain_block2)
    return aes.decrypt(cipher_block2)

def findIV(key, cipher1):
    aes = AES.new(key, AES.MODE_CBC, plain_block1)
    return aes.decrypt(cipher1)

keys = bruteforce_key()
for k in keys:
    cipher1 = findCipher1(k)
    IV = findIV(k, cipher1)
    aes = AES.new(k, AES.MODE_CBC, IV)
    flag = aes.decrypt(enc_flag)
    print(flag)