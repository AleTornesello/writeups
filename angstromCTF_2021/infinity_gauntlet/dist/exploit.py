from pwn import *
import re

bar_regex = 'bar\((\d*|\?), (\d*|\?), (\d*|\?)\) = (\d*|\?)\n'
foo_regex = 'foo\((\d*|\?), (\d*|\?)\) = (\d*|\?)\n'

def bar1(b, c, d):
    b = int(b)
    c = int(c)
    d = int(d)

    return -((c + 1) * b) + d

def bar2(a, c, d):
    a = int(a)
    c = int(c)
    d = int(d)

    return (d - a)//(c + 1)

def bar3(a, b, d):
    a = int(a)
    b = int(b)
    d = int(d)

    return ((d-a)//b)-1

def bar4(a, b, c):
    a = int(a)
    b = int(b)
    c = int(c)

    return (c + 1)*b + a

def foo1(b, c):
    b = int(b)
    c = int(c)

    return c ^ 0x539 ^ (b + 1)

def foo2(a, c):
    a = int(a)
    c = int(c)

    return (c ^ a ^ 0x539) - 1

def foo3(a, b):
    a = int(a)
    b = int(b)

    return (b + 1) ^ a ^ 0x539

p = remote('shell.actf.co', 21700)
round_counter = 1

flag = [0]*26

while True:
    p.recvuntil('===\n')
    l = p.recvline()
    l = l.decode('utf-8')

    print(f'ROUND {round_counter} ', l.strip())

    if 'bar' in l:
        matches = re.search(bar_regex, l)
        a, b, c, d = [matches.group(x) for x in range(1, 5)]

        if a == '?':
            ans = bar1(b, c, d)
        elif b == '?':
            ans = bar2(a, c, d)
        elif c == '?':
            ans = bar3(a, b, d)
        elif d == '?':
            ans = bar4(a, b, c)

    elif 'foo' in l:
        matches = re.search(foo_regex, l)
        a, b, c = [matches.group(x) for x in range(1, 4)]

        if a == '?':
            ans = foo1(b, c)
        elif b == '?':
            ans = foo2(a, c)
        elif c == '?':
            ans = foo3(a, b)

    print(ans)
    p.sendline(f'{ans}')

    a = p.recvline()
    if b'Wrong!' in a:
        p.interactive()

    if round_counter >= 50:
	    pos = (ans >> 8) & 0xFF
	    pos -= round_counter

	    letter = ans & 0xFF

	    flag[pos] = (letter ^ (0x11*pos)) & 0xFF

	    print(bytes(flag))

    if bytes(flag) == b'actf{snapped_away_the_end}':
        break

    round_counter += 1
